from sklearn.externals import joblib

model_path = 'house_price_regressor.pkl'

joblib.dump(fitted_model, model_path)



from azureml.core.model import Model

model = Model.register(model_path = model_path,
                       model_name = "house_price_regression",
                       tags = {"key": "0.1"},
                       description = "Boston House Price Dataset Regression",
                       workspace = ws)

print(model.name, model.id, model.version, sep = '\n')


%%writefile score.py

import json
import numpy as np

from sklearn.externals import joblib
from azureml.core.model import Model
import azureml.train.automl

def init():
    global model
    model_path = Model.get_model_path('house_price_regression')
    model = joblib.load(model_path)

def run(raw_data):
    data = np.array(json.loads(raw_data)['data'])
    y_hat = model.predict(data)
    return y_hat.tolist()

####################################################################



from azureml.core.conda_dependencies import CondaDependencies 

myenv = CondaDependencies()
myenv.add_pip_package("numpy")
myenv.add_pip_package("azureml-sdk[notebooks]")
myenv.add_pip_package("azureml-sdk[automl]")
myenv.add_conda_package("scikit-learn")
env_path = 'my_env.yml'

with open(env_path,"w") as f:
    f.write(myenv.serialize_to_string())


##########################################################

from azureml.core.webservice import AciWebservice
from azureml.core.webservice import Webservice
from azureml.core.image import ContainerImage

score_path = 'score.py'

image_config = ContainerImage.image_configuration(execution_script=score_path, 
                                                  runtime="python", 
                                                  conda_file=env_path)

aciconfig = AciWebservice.deploy_configuration(cpu_cores=1, 
                                               memory_gb=1, 
                                               tags={"data": "Boston House Prices",  "method" : "sklearn"}, 
                                               description='Predict House Prices using Ensemble Model')

service = Webservice.deploy_from_model(workspace=ws,
                                       name='automl-model',
                                       deployment_config=aciconfig,
                                       models=[model],
                                       image_config=image_config)

service.wait_for_deployment(show_output=True)

print(service.scoring_uri)

########################### test api ###################################

import json
test_data = json.dumps({"data": X_test.tolist()})
test_data = bytes(test_data, encoding = 'utf8')

result = service.run(input_data=test_data)

api_r2 = r2_score(y_test, np.array(result))
print(round(api_r2, 3))
